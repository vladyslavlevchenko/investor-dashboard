// <auto-generated />
using System;
using InvestorDashboard.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InvestorDashboard.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251006144149_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("InvestorDashboard.Core.Entities.BenchmarkSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Symbol", "Date")
                        .IsUnique();

                    b.ToTable("BenchmarkSeries");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.PortfolioSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DriftBandPercent")
                        .HasPrecision(10, 6)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinNotional")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RiskFreeRate")
                        .HasPrecision(10, 6)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PortfolioSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DriftBandPercent = 0.05m,
                            MinNotional = 100m,
                            RiskFreeRate = 0.04m,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.PositionLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CostBasis")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("SecurityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("SecurityId");

                    b.ToTable("PositionLots");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.PriceBar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("High")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Low")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Open")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("SecurityId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SecurityId", "Date")
                        .IsUnique();

                    b.ToTable("PriceBars");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.Security", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssetClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Ticker")
                        .IsUnique();

                    b.ToTable("Securities");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.TargetAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PortfolioSettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TargetWeight")
                        .HasPrecision(10, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioSettingsId", "Ticker")
                        .IsUnique();

                    b.ToTable("TargetAllocations");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Commission")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("SecurityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("SecurityId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.PositionLot", b =>
                {
                    b.HasOne("InvestorDashboard.Core.Entities.Security", "Security")
                        .WithMany("PositionLots")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Security");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.PriceBar", b =>
                {
                    b.HasOne("InvestorDashboard.Core.Entities.Security", "Security")
                        .WithMany("PriceBars")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Security");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.TargetAllocation", b =>
                {
                    b.HasOne("InvestorDashboard.Core.Entities.PortfolioSettings", "PortfolioSettings")
                        .WithMany("TargetAllocations")
                        .HasForeignKey("PortfolioSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortfolioSettings");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.Transaction", b =>
                {
                    b.HasOne("InvestorDashboard.Core.Entities.Security", "Security")
                        .WithMany("Transactions")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Security");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.PortfolioSettings", b =>
                {
                    b.Navigation("TargetAllocations");
                });

            modelBuilder.Entity("InvestorDashboard.Core.Entities.Security", b =>
                {
                    b.Navigation("PositionLots");

                    b.Navigation("PriceBars");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
